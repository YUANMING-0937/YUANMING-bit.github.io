<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuanming-bit.github.io</id>
    <title>渊明</title>
    <updated>2021-09-01T02:50:53.919Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuanming-bit.github.io"/>
    <link rel="self" href="https://yuanming-bit.github.io/atom.xml"/>
    <subtitle>总是在安静的时候想得很多然后难受很久 。 </subtitle>
    <logo>https://yuanming-bit.github.io/images/avatar.png</logo>
    <icon>https://yuanming-bit.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 渊明</rights>
    <entry>
        <title type="html"><![CDATA[Python/GIL锁  进程线程]]></title>
        <id>https://yuanming-bit.github.io/post/mian-shi-gil-suo-jin-cheng-xian-cheng/</id>
        <link href="https://yuanming-bit.github.io/post/mian-shi-gil-suo-jin-cheng-xian-cheng/">
        </link>
        <updated>2021-09-01T00:30:27.000Z</updated>
        <content type="html"><![CDATA[<p>在讲GIL锁之前先聊一下进程线程之间的关系</p>
<h3 id="进程线程">进程线程</h3>
<ul>
<li>进程<br>
<strong>进程是资源分配的的最小单位</strong>，开辟自己的地址空间执行的是一段程序，一个进程可以包含多个线程，进程之间不会相互影响，进程间不方便交换数据，进程的性能开销比较大。</li>
<li>线程<br>
<strong>线程是CPU调度的最小单位</strong>，线程地址包含在进程地址空间中执行的是进程下发的任务，一个线程只从属一个进程，线程影响所属进程，同一进程下线程间数据共享，线程性能开销比较小。</li>
</ul>
<p><strong>举例说明就如同火车与车厢的从属关系，进程就相当于火车、线程就是车厢，资源占用度取决于挂载的车厢数量，多列火车之间不会相互影响，某列火车上一节车厢坏掉了，整列火车都不能运行了，数据交换以列车物资交换举例，同列火车车厢间交换物资比多列火车之间交换物资更加方便快捷。</strong></p>
<h3 id="pythongil锁">Python/GIL锁</h3>
<p><strong>Python/GIL锁</strong>锁的是CPU上的内核，上面讲过<strong>线程是CPU调度的最小单位</strong>，即线程是运行在CPU上在CPU的内核上执行的，Python/GIL锁是控制多线程非并发的执行。保证多线程在内核上执行的唯一性。</p>
<p><strong>Python/GIL锁的认识</strong></p>
<ul>
<li>保证安全<br>
上面讲到多线程之间的数据共享，当多线程同时对数据进行io时，不能确保某线程io是否执行完毕就有新的线程进行io无法保证数据正确，就会造成数据混乱，<strong>扩展理解Mysql的事务</strong> Python/GIL锁确保了某线程io执行结束或者超过Time Tick后才可以执行其他线程。</li>
<li>多核性能无法满载<br>
由于Python/GIL锁为了确保安全，锁的是所有内核，以确保同一时刻只有一个线程通过内核通道正常io，多核上的线程存在等待过程，所以多核性能无法满载。</li>
</ul>
<p><strong>超过Time Tick</strong>  当前线程退回，并重新开始竞争，退回并重新竞争过程中其它核只能观望。</p>
<p>tread1 内核1 tread2 内核2 tread3，当只有内核1时，tread1、tread2、tread3共同竞争通过内核1的机会，tread1竞争到了，tread2、tread3等待tread1 io结束或者超过Time Tick，tread1 io正常结束tread2、tread3竞争执行，tread1 io超过Time Tick结束tread1、tread2、tread3重新竞争执行，可以让单核性能满载。<br>
tread1，tread3运行在内核1上tread2运行在内核2上，tread1，tread3竞争通过内核1的机会，tread1竞争到了，tread2、tread3等待tread1 io结束或者超过Time Tick，tread1 io正常结束tread2在内核2上执行、tread3在内核1上执行，tread1 io超过Time Tick结束，tread1、tread3又要重新竞争执行，当tread1又抢到了内核1上的执行机会，内核2上的tread2也只能干看着不能动，因为内核1上的某线程还没执行结束。</p>
<p><strong>为了避免同一线程霸占CPU，在python3.x中，线程会自动的调整自己的优先级，使得多线程任务执行效率更高。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TCP/IP协议  三次握手与四次挥手]]></title>
        <id>https://yuanming-bit.github.io/post/tcpip-san-wo-si-hui/</id>
        <link href="https://yuanming-bit.github.io/post/tcpip-san-wo-si-hui/">
        </link>
        <updated>2021-08-31T08:43:12.000Z</updated>
        <content type="html"><![CDATA[<p>在三次握手与四次挥手之前还是需要对TCP报文有些基本认知：<br>
<img src="https://yuanming-bit.github.io/post-images/1630399809209.png" alt="" loading="lazy"></p>
<p>三次握手是指客户端携带请求<strong>请求建立连接码</strong>和<strong>序列号</strong>（SYN，seq）向服务器端发送一次请求，若服务器端成功接受请求后返回<strong>确认请求码</strong>和<strong>确认号</strong>（ACK，ack）只表明从客户端到服务器端发送数据没有问题，不确定服务器向客户端发送数据是否正常。在返回数据的过程中也添加<strong>建立连接码</strong>和<strong>序列号</strong>（SYN，seq）服务器端成功接收客户端返回的<strong>确认请求码</strong>和<strong>确认号</strong>（ACK，ack）后才表明双向连接的成功连通。</p>
<figure data-type="image" tabindex="1"><img src="https://yuanming-bit.github.io/post-images/1630401100235.png" alt="" loading="lazy"></figure>
<p>四次挥手是指客户端携带<strong>请求断开连接码</strong>和<strong>序列号</strong>（FIN，seq）向服务器端发送断开请求，服务器端成功接受请求后返回<strong>确认请求码</strong>和<strong>确认号</strong>（ACK，ack）表明从客户端到服务器端已经准备好了可以断开，但是客户端无法确定服务器到客户端是否还有数据传输未完成。服务端也需要向客户端发送<strong>请求断开连接码</strong>和<strong>序列号</strong>（FIN，seq）请求断开连接，服务器端成功接收客户端返回的<strong>确认请求码</strong>和<strong>确认号</strong>（ACK，ack）后才完成连接的断开。</p>
<figure data-type="image" tabindex="2"><img src="https://yuanming-bit.github.io/post-images/1630402359642.png" alt="" loading="lazy"></figure>
<p>文末附跟学习视频：https://www.bilibili.com/video/BV1bi4y1x7m5 理解鉴于视频观点 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yuanming-bit.github.io/post/hello-gridea/</id>
        <link href="https://yuanming-bit.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>